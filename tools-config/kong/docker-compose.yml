version: '3.7'

services:
  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: "kong:3.5.0"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "kong:3.5.0"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "kong:3.5.0"
    user: "kong"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      # kong manager
      KONG_ADMIN_GUI_HOST: 0.0.0.0 # Permitir que o Kong Admin GUI escute em todos os IPs
      KONG_ADMIN_GUI_PORT: 8002   # Porta para o Kong Admin GUI
      KONG_ADMIN_GUI_PATH: /manager
      KONG_ADMIN_GUI_URL: http://192.168.0.15:8002 #a principio permite a executar o kong manager de qualquer maquina. Alternativamente colocar o ip da vm
      KONG_PORTAL_GUI_HOST: '192.168.0.15'
      KONG_PORTAL_GUI_PORT: 8002
      KONG_PORTAL: 'on'
      KONG_LUA_PACKAGE_PATH: '/usr/local/custom/?.lua;;'
      # fim configuracao kong manager     
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
      # Enable the File Log plugin
      KONG_PLUGINS: bundled,file-log,oauth2   # Add 'file-log' oauth2  to the list of plugins
      KONG_FILE_LOG_PATH: /logs  # Set the path for file logs
      # KONG_DECLARATIVE_CONFIG: kong.yml \ kong start -c kong.conf
      # KONG_DECLARATIVE_CONFIG: |
      #         _format_version: "3.0"
      #         _transform: true

      #         services:
      #           - name: demo-svc
      #             url: http://httpbin.org/anything
      #             routes:
      #               - name: demo-route
      #                 paths:
      #                   - /test
      #               - name: other-route
      #                 paths:
      #                   - /demo

      #         plugins:
      #           - name: file-log
      #             config:
      #               path: /dev/stdout
      #           - name: pre-function
      #             route: demo-route
      #             config:
      #               access:
      #                 - kong.log.set_serialize_value("request.body", kong.request.get_raw_body())
      #               body_filter:
      #                 - kong.log.set_serialize_value("response.body", kong.response.get_raw_body())      
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
      - "8002:8002/tcp"  # Porta para a GUI do Kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

volumes:
  kong_data: {}

networks:
  kong-net:
    external: true



