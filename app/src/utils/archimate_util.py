from datetime import datetime
import xml.etree.ElementTree as ET
import xml.dom.minidom
from lxml import etree
import re
import os
import os.path
import sys # Add missing import statement for sys module
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', "..")))
from app.src import configs



def prepare_archimate_exchange_model():
    """
        prepare the inicial xml of the archimate model
        returns:
            file: xml.etree.ElementTree (named as root)
    """
    try:
        # Create the root element for the ArchiMate model
        root = ET.Element("model", attrib={
            "xmlns": "http://www.opengroup.org/xsd/archimate/3.0/",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xsi:schemaLocation": "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Diagram.xsd",
            "identifier": "id-ea-mining-exchange-model-1",
        })

        # Add the name element to the root element
        name = ET.SubElement(root, "name", attrib={"xml:lang": "en"})
        name.text = "EA Mining Exchange Model"
        documentation = ET.SubElement(root, "documentation", attrib={"xml:lang": "en"})
        documentation.text = "Model generated by IA mining process to be imported in ArchiMate Tool."
        
        elements = ET.SubElement(root, "elements")
        relationships = ET.SubElement(root, "relationships")
        
        # Create the view and diagram
        views = ET.SubElement(root, "views")
        # view = ET.SubElement(views, "view", attrib={"name": "API extracted process"})
        diagrams= ET.SubElement(views, "diagrams")
        diagram_view = ET.SubElement(diagrams, "view", attrib={"identifier": "id-view-ea-process-view", "viewpoint":"Application Usage", "xsi:type":"Diagram"})
        diagram_view_name = ET.SubElement(diagram_view, "name", attrib={"xml:lang": "en"})
        diagram_view_name.text = "API extracted process view"
        diagram_view_documentation = ET.SubElement(diagram_view, "documentation", attrib={"xml:lang": "en"})
        diagram_view_documentation.text = "Process View Mined from API Logs."   
        
        diagram_dr_view = ET.SubElement(diagrams, "view", attrib={"identifier": "id-view-ea-data-relation-view", "viewpoint":"Application Usage", "xsi:type":"Diagram"})
        diagram_view_name = ET.SubElement(diagram_dr_view, "name", attrib={"xml:lang": "en"})
        diagram_view_name.text = "API extracted Data Relation view"
        diagram_view_documentation = ET.SubElement(diagram_dr_view, "documentation", attrib={"xml:lang": "en"})
        diagram_view_documentation.text = "Data Relation View Mined from API Logs."              
        
        return root
    except Exception as error:   
        print('Ocorreu problema {} '.format(error.__class__))
        print("mensagem", str(error))
        print(f"In prepare_archimate_exchange_model module :", __name__)
        raise error

def print_root_xml(root):

        xml_string = ET.tostring(root, encoding='utf-8', method='xml').decode('utf-8')
        xml_string = re.sub('ns0:', '', xml_string)
        xml_string = re.sub('xmlns:ns0', 'xmlns', xml_string)  
        # # Parse the XML string and convert it to a pretty-printed XML string
        print("#################### begin pretty_xml_string ##########################")
        dom = xml.dom.minidom.parseString(xml_string)
        pretty_xml_string = dom.toprettyxml()        
        print(pretty_xml_string)        
        print("#################### end pretty_xml_string ##########################")
    
def save_archimate_exchange_model(root):
# Create the XML tree and write it to a file
    try:
        #tree = ET.ElementTree(root)
        #xml_string = ET.tostring(root,encoding='utf-8').decode('utf-8')
        # Parse the XML string and convert it to a pretty-printed XML string
        xml_string = ET.tostring(root, encoding='utf-8', method='xml').decode('utf-8')     
        xml_string = re.sub('ns0:', '', xml_string)
        xml_string = re.sub('xmlns:ns0', 'xmlns', xml_string)      
        dom = xml.dom.minidom.parseString(xml_string)
        pretty_xml_string = dom.toprettyxml()
        
        # Remove extra newlines
        pretty_xml_string = re.sub('\n\s*\n', '\n', pretty_xml_string)        
                     
        file_path = configs.ARCHIMATE_MODEL["file_path"] 
        #datahora = datetime.now().strftime("%Y%m%d%H%M")       
        #file_name = f"{datahora}_{configs.ARCHIMATE_MODEL["archimate_file_name"]}"        
        file_name = configs.ARCHIMATE_MODEL["archimate_file_name"]
        # Check if the directory exists
        if not os.path.exists(file_path):
            # If the directory doesn't exist, create it
            os.makedirs(file_path)        
        with open(file_path+file_name, "wb") as f:
            #f.write(xml_string.encode('utf-8'))         
            f.write(pretty_xml_string.encode('utf-8'))         
            
    except Exception as error:   
        print('Ocorreu problema {} '.format(error.__class__))
        print("mensagem", str(error))
        print(f"In save_archimate_exchange_model module :", __name__)
        raise error       
    
def check_archimate_model_exchange_xml():
    # check if the xml is well formed
    
    file_path = configs.ARCHIMATE_MODEL["file_path"]  
    # datahora = datetime.now().strftime("%Y%m%d%H%M")       
    # file_name = f"{datahora}_{configs.ARCHIMATE_MODEL["archimate_file_name"]}"    
    file_name = configs.ARCHIMATE_MODEL["archimate_file_name"]
    # Check if the directory exists
    # with open(file_path+file_name, "rb") as f:
    #     f.load(pretty_xml_string.encode('utf-8'))
    
    # Parse the XML document and get the root element
    tree = ET.parse(file_path+file_name)
    root = tree.getroot()
    xml_string = ET.tostring(root, encoding='utf-8').decode('utf-8')
    dom = xml.dom.minidom.parseString(xml_string)
    pretty_xml_string_copy = dom.toprettyxml()

    # Check if the XML document is well-formed
    try:
        etree.fromstring(pretty_xml_string_copy)
        print("The XML document is well-formed.")
        return True
    except etree.XMLSyntaxError:
        print("The XML document is not well-formed.")    
        
def load_archimate_model_xml():
    try:
        #TODO - check if the file exists if not call archimate_model_prepare
        file_path = configs.ARCHIMATE_MODEL["file_path"]        
        # datahora = datetime.now().strftime("%Y%m%d%H%M")       
        # file_name = f"{datahora}_{configs.ARCHIMATE_MODEL["archimate_file_name"]}"        
        file_name = configs.ARCHIMATE_MODEL["archimate_file_name"]
        # Check if the directory exists       
        # Check if the directory exists
        # with open(file_path+file_name, "rb") as f:
        #     f.load(pretty_xml_string.encode('utf-8'))        
        # Parse the XML document and get the root element
        tree = ET.parse(file_path+file_name)
        root = tree.getroot()
            
        # print("#################### pretty_xml_string ##########################")
        # xml_string = ET.tostring(root, encoding='utf-8', method='xml').decode('utf-8')   
        # xml_string = re.sub('ns0:', '', xml_string)
        # xml_string = re.sub('xmlns:ns0', 'xmlns', xml_string)         
        # print(xml_string)
        
        return root
             
    except Exception as error:   
        print('Ocorreu problema {} '.format(error.__class__))
        print("mensagem", str(error))
        print(f"In load_archimate_model_xml module :", __name__)
        raise error          