import xml.etree.ElementTree as ET
import xml.dom.minidom

# Create the root element for the ArchiMate model
root = ET.Element("model", attrib={
    "xmlns": "http://www.opengroup.org/xsd/archimate/3.0/",
    "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
    "xsi:schemaLocation": "http://www.opengroup.org/xsd/archimate/3.0/ http://www.opengroup.org/xsd/archimate/3.1/archimate3_Diagram.xsd",
    "identifier": "id-1d0ef6fe-f1de-40cc-8509-4b3b641f2ac9"
})

# Add the name element to the root element
name = ET.SubElement(root, "name", attrib={"xml:lang": "en"})
name.text = "Test Model"
documentation = ET.SubElement(root, "documentation", attrib={"xml:lang": "en"})
documentation.text = "Model generated by IA mining process to be imported in ArchiMate Tool."

elements = ET.SubElement(root, "elements")

# Create the Business folder
#business_folder = ET.SubElement(root, "folder", attrib={"name": "Business Layer", "type": "business", "id": "business-folder-id})
#actors_folder = ET.SubElement(business_folder, "folder", attrib={"name": "Actors"})
#process_folder = ET.SubElement(business_folder, "folder", attrib={"name": "Business Process"})

# Create the Business Actor element
actor_element = ET.SubElement(elements, "element", attrib={"identifier": "actor-id-1", "xsi:type": "BusinessActor"})
actor_name = ET.SubElement(actor_element, "name")
actor_name.text = "AcmeTeste"

# Create the Business Process elements
process_element_a = ET.SubElement(elements, "element", attrib={"identifier": "process-a-id", "xsi:type": "BusinessProcess"})
process_name_a = ET.SubElement(process_element_a, "name")
process_name_a.text = "Process Test A"

process_element_b = ET.SubElement(elements, "element", attrib={"identifier": "process-b-id", "xsi:type": "BusinessProcess" })
process_name_b = ET.SubElement(process_element_b, "name")
process_name_b.text = "Process Test B"

# Create the Business Event elements
event_element_a1 = ET.SubElement(elements, "element", attrib={"identifier": "event-a1-id", "xsi:type": "BusinessEvent" })
event_name_a1 = ET.SubElement(event_element_a1, "name")
event_name_a1.text = "Process Event A1"

event_element_a2 = ET.SubElement(elements, "element", attrib={"identifier": "event-a2-id", "xsi:type": "BusinessEvent" })
event_name_a2 = ET.SubElement(event_element_a2, "name")
event_name_a2.text = "Process Event A2"

event_element_b1 = ET.SubElement(elements, "element", attrib={"identifier": "event-b1-id", "xsi:type": "BusinessEvent" })
event_name_b1 = ET.SubElement(event_element_b1, "name")
event_name_b1.text = "Process Event B1"

event_element_b2 = ET.SubElement(elements, "element", attrib={"identifier": "event-b2-id", "xsi:type": "BusinessEvent" })
event_name_b2 = ET.SubElement(event_element_b2, "name")
event_name_b2.text = "Process Event B2"

#relationships
relationships = ET.SubElement(root, "relationships")
relationship_1 = ET.SubElement(relationships, "relationship ", attrib={"identifier": "id-rel1", "source": "process-a-id", "target": "actor-id-1", "xsi:type":"Serving" })
relationship_1 = ET.SubElement(relationships, "relationship ", attrib={"identifier": "id-rel2", "source": "process-b-id", "target": "actor-id-1", "xsi:type":"Serving" })

# Create the view and diagram
views = ET.SubElement(root, "views")
# view = ET.SubElement(views, "view", attrib={"name": "API extracted process"})
diagrams= ET.SubElement(views, "diagrams")
diagram_view_1 = ET.SubElement(diagrams, "view", attrib={"identifier": "view-id-1", "viewpoint":"Application Usage", "xsi:type":"Diagram"})
diagram_view_1_name = ET.SubElement(diagram_view_1, "name", attrib={"xml:lang": "en"})
diagram_view_1_name.text = "API extracted process view"
diagram_view__1_documentation = ET.SubElement(diagram_view_1, "documentation", attrib={"xml:lang": "en"})
diagram_view__1_documentation.text = "Process View Mined from API Logs."

#x: The x-coordinate of the top-left corner of the element. This determines the horizontal position of the element from the left side of the parent element or the screen.
#y: The y-coordinate of the top-left corner of the element. This determines the vertical position of the element from the top of the parent element or the screen.
#w: The width of the element. This determines how wide the element is.
#h: The height of the element. This determines how tall the element is.
diagram_view_1_node_1 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_actor-id-1", "xsi:type":"Element", "elementRef":"actor-id-1", "x":"450", "y":"10", "w":"120", "h":"50"})
diagram_view_1_node_2 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_process-a", "xsi:type":"Element", "elementRef":"process-a-id", "x":"300", "y":"200", "w":"120", "h":"50"})
diagram_view_1_node_3 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_process-b", "xsi:type":"Element", "elementRef":"process-b-id", "x":"600", "y":"200", "w":"120", "h":"50"})
diagram_view_1_node_4 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_event-a1-id", "xsi:type":"Element", "elementRef":"event-a1-id", "x":"100", "y":"400", "w":"120", "h":"50"})
diagram_view_1_node_5 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_event-a2-id", "xsi:type":"Element", "elementRef":"event-a2-id", "x":"300", "y":"400", "w":"120", "h":"50"})
diagram_view_1_node_6 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_event-b1-id", "xsi:type":"Element", "elementRef":"event-b1-id", "x":"500", "y":"400", "w":"120", "h":"50"})
diagram_view_1_node_6 = ET.SubElement(diagram_view_1, "node", attrib={"identifier": "node_event-b2-id", "xsi:type":"Element", "elementRef":"event-b2-id", "x":"700", "y":"400", "w":"120", "h":"50"})
diagram_view_1_connection_1 = ET.SubElement(diagram_view_1, "connection", attrib={"identifier": "connection_id_1", "xsi:type":"Relationship", "source":"node_process-a", "target":"node_actor-id-1", "relationshipRef":"id-rel1"})
diagram_view_1_connection_2 = ET.SubElement(diagram_view_1, "connection", attrib={"identifier": "connection_id_2", "xsi:type":"Relationship", "source":"node_process-b", "target":"node_actor-id-1", "relationshipRef":"id-rel2"})


# # Add the elements to the diagram
# ET.SubElement(diagram, "element", attrib={"ref": actor_element.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": process_element_a.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": process_element_b.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": event_element_a1.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": event_element_a2.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": event_element_b1.attrib["id"]})
# ET.SubElement(diagram, "element", attrib={"ref": event_element_b2.attrib["id"]})

# Create the XML tree and write it to a file
tree = ET.ElementTree(root)
xml_string = ET.tostring(root,encoding='utf-8').decode('utf-8')

# Parse the XML string and convert it to a pretty-printed XML string
dom = xml.dom.minidom.parseString(xml_string)
pretty_xml_string = dom.toprettyxml()
# Print the pretty-printed XML string
print(pretty_xml_string)

# Save the XML string to a file
with open("c:/gitHub/utad/utad-ea-mining/app/src/studies/archimate model ex/create_archi_model.xml", "wb") as f:
  #f.write(tree)
  f.write(pretty_xml_string.encode('utf-8'))
  f.close()
  
#tree.write("/c:/gitHub/utad/utad-ea-mining/app/src/studies/archimate model ex/create_archi_model.archimate")

from lxml import etree

# Parse the XML string and convert it to a pretty-printed XML string
dom = xml.dom.minidom.parseString(xml_string)
pretty_xml_string_copy = dom.toprettyxml()

# Check if the XML document is well-formed
try:
    etree.fromstring(pretty_xml_string_copy)
    print("The XML document is well-formed.")
except etree.XMLSyntaxError:
    print("The XML document is not well-formed.")